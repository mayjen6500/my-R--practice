Mat1
class(Mat1)
typeof(Mat1)
Mat1
Mat1[[2]]    #取出方式 先往下再往右
Mat1[[6]]     #左上-左下-中上-中下-右上-右下
Mat2 <- matrix(
c("a","b","c","d"), 2, 2
)
Mat2
class(Mat2)
typeof(Mat2)
Mat2[[2]]
Mat2[c(T,F,F,T)]
StuList <- list(
studentID=c(172,214,322,425,517),
names=c("小明","大雄","胖虎","小新","大白"),
grade=c(80,60,90,70,50)
)
StuList
stuDF <- data.frame(
studentID=c(172,214,322,425,517),
names=c("小明","大雄","胖虎","小新","大白"),
grade=c(80,60,90,70,50)
)
stuDF
class(stuDF)
typeof(StuDF)
class(StuDF$names)
StuDF$names <- as.character(StuDF$names)
class(StuDF$names)
StuDF2 <- data.frame(
studentID=c(172,214,322,425,517),
names=c("小明","大雄","胖虎","小新","大白"),
grade=c(80,60,90,70,50),
stringsAsFactors = FALSE
)
StuDF2
class(StuList)
as.data.frame(StuList) -> StuDF3
class(StuDF3)
StuDF3
as.data.frame(StuList,stringsAsFactors = F) -> StuDF4
class(StuDF4)
StuDF4
LETTERS # R內設元素值為英文字母群的character vector
chosenLETTERS <- LETTERS[1:15]
matObj1 <- matrix(chosenLETTERS,5,3)
matObj1
summary(cars)
plot(pressure)
chosenLETTERS[8]
matObj1[8]
matObj1
matObj1[3,2]
matObj1[c(F,F,TRUE,F,F),c(F,TRUE,F)]
tolower(matObj1)
chosenLETTERS <- LETTERS[1:15]
matObj1 <- matrix(chosenLETTERS,5,3)
matObj1
chosenLETTERS[8]
matObj1[8]
LETTERS # R內設元素值為英文字母群的character vector
LETTERS # R內設元素值為英文字母群的character vector
chosenLETTERS <- LETTERS[1:15]
matObj1 <- matrix(chosenLETTERS,5,3)
matObj1
LETTERS # R內設元素值為英文字母群的character vector
chosenLETTERS <- LETTERS[1:15]   #取英文字母前15個
matObj1 <- matrix(chosenLETTERS,5,3) #做成矩陣
matObj1
tolower(matObj1)
toupper(matObj1)
chosenLETTERS[[8]]
matObj1[[8]]
matObj1
matObj1[3,2]
matObj1[c(F,F,TRUE,F,F),c(F,TRUE,F)]
matObj1[c(1,4),c(2,3)]
matObj1
matObj1[3,2]
matObj1[c(F,F,TRUE,F,F),c(F,TRUE,F)]
matObj1[c(1,4),c(2,3)]  #前面rows 後面columns
matObj1[c(T,F,F,T,F),c(F,T,T)]
matObj1
matObj1[3,2]
matObj1[c(F,F,TRUE,F,F),c(F,TRUE,F)]
matObj1[c(1,4),c(2,3)]  #前面rows 後面columns
matObj1[c(T,F,F,T,F),c(F,T,T)] #跟上行同樣意思
matObj1[c(1,4),c(F,T,T)]
matObj1
matObj1[3,2]
matObj1[c(F,F,TRUE,F,F),c(F,TRUE,F)]
matObj1[c(1,4),c(2,3)]  #前面rows 後面columns
matObj1[c(T,F,F,T,F),c(F,T,T)] #跟上行同樣意思
matObj1[c(1,4),c(F,T,T)] #可以混著搭 同樣意思
library(readr)
classSurvey <- read_csv("https://raw.githubusercontent.com/tpemartin/github-data/master/classSurvey.csv")
dim(classSurvey)
dim(classSurvey)
nrow(classSurvey)
dim(classSurvey)
nrow(classSurvey)
ncol(classSurvey)
View(classSurvey)
View(classSurvey)
classSurvey[,3]
classSurvey[,3]
classSurvey
classSurvey[1,3]
class(classSurvey)
classSurvey[,3]
classSurvey[,4]
classSurvey[c(1:60),c(4,5)]
classSurvey[,]
classSurvey[c(1:60),c(4,5)]
classSurvey[c(1:60),c(4,5)]
classSurvey[c(1:60),c(4,5)]
classSurvey[c(1:60),c(4,5)]
classSurvey[,]
classSurvey[c(1:60),c(4,5)]
classSurvey[c(1:60),c(F,F,F,T,T,F)]
classSurvey[,c(4,5)]
classSurvey[,4:5]
classSurvey[,c(F,F,F,T,T,F)]
#classSurvey[]
classSurvey[c("性別","本學期學分數")]
classSurvey[logical_index,]
knitr::opts_chunk$set(echo = TRUE)
library(lubridate); library(stringr); library(dplyr); library(readr); library(purrr)
install.packages("dplyr")
library(lubridate); library(stringr); library(dplyr); library(readr); library(purrr)
library(lubridate); library(stringr); library(dplyr); library(readr); library(purrr)
library(lubridate); library(stringr); library(dplyr); library(readr); library(purrr)
x <- as.character(round(runif(10)*100),10)
x
as.integer(x)
as.integer(x)
logicBig <- as.integer(x) > 50
logicBig
compoundject <-
(1,"hello",TRUE)
compoundject <- list
(1,"hello",TRUE)
compoundject <- list(1,"hello",TRUE)
compoundject
load("submitTime.Rda")
load("submitTime.Rda")
randomGrades <- sample(40:80,15,replace = T)
randomCredits <- sample(0:3,15,replace=T)
data3 <- list(
成績=randomGrades,
學分數=randomCredits
)
randomGrades <- sample(40:80,15,replace = T)
randomCredits <- sample(0:3,15,replace=T)
data3 <- list(
成績=randomGrades,
學分數=randomCredits
)
data3
data3
data3
data3
logiPass <- (data3$成績 >= 60
)
logiPass
passData <- list(
成績= ,
學分數= ,
)
logiPass <- (data3$成績 >= 60
)
logiPass
)
logiPass <- (data3$成績 >= 60)
logiPass
passData <- list(
成績= data3$成績[logiPass],
學分數= data3$成績[logiPass],
)
logiPass <- (data3$成績 >= 60)
logiPass
passData <- list(
成績= data3$成績[logiPass],
學分數= data3$成績[logiPass],
)
logiPass <- (data3$成績 >= 60)
logiPass
passData <- list(
成績= data3$成績[logiPass],
學分數= data3$學分數[logiPass],
)
logiPass <- (data3$成績 >= 60)
logiPass
passData <- list(
成績= data3$成績[logiPass],
學分數= data3$學分數[logiPass],
)
logiPass <- (data3$成績 >= 60)
logiPass
passData <- list(
成績= data3$成績[logiPass],
學分數= data3$學分數[logiPass]
)
passData
sample(99:103,15,replace = T)-> yy
sample(1:12,15,replace=T)-> mm
str_c("民國",str_pad(yy,3,"left","0"),"年",mm,"月") -> twDates
#### twDates
twDates
str_replace(twDate,"民國","") >- twDates2
str_replace(twDates,"民國","") >- twDates2
str_replace(twDates,"民國","") >- twDates2
str_replace(twDates,"民國","") >- twDates2
str_replace(twDates,"民國","") >- twDates2
str_replace(twDates,"民國","") >- twDates2
str_replace(twDates,"民國","") >- twDates2
str_replace(twDates,"民國","") >- x1
str_replace(twDates,"民國","") -> x1
x1
str_replace(twDates2,"月","") >- twDate2
str_replace(twDates,"民國","") -> x1
x1
str_replace(x1,"月","") -> twDate2
twDate2
str_replace_all(twDates,"(民國)|(月)","") -> x2
x2
twDates
twDates
str_sub(ttwDate,3,5) -> yearCharacter
twDates
str_sub(twDate,3,5) -> yearCharacter
twDates
str_sub(twDates,3,5) -> yearCharacter
yearCharacter
as.integer(yearCharacter)+1911 -> westYears
wes
as.integer(yearCharacter)+1911 -> westYears
westYears
twDate2
twDate2
str_split(twDate2,"年")
twDate2
str_split(twDate2,"年")
list(
c("103","6"),
c("101","4"),
c("103","12')
) -> aa
aa
twDate2
str_split(twDate2,"年")
list(
c("103","6"),
c("101","4"),
c("103","12")
) -> aa
aa
twDate2
str_split(twDate2,"年") -> datesSplitList
dateSplitList
twDate2
str_split(twDate2,"年") -> datesSplitList
datesSplitList
#list(c("103","6"),c("101","4"),c("103","12")) -> aa
twDate2
str_split(twDate2,"年") -> datesSplitList
datesSplitList
map(datesSplitList,~.[[2]]) -> monthList
monthList
unlist(monthList) -> monthVector
monthVector
twDate2
str_split(twDate2,"年") -> datesSplitList
datesSplitList
map(datesSplitList,~.[[2]]) -> monthList
monthList
unlist(monthList) -> monthVector
monthVector
str_c(as.character(westYears,monthVector,"01",sep = "-")
twDate2
str_split(twDate2,"年") -> datesSplitList
datesSplitList
map(datesSplitList,~.[[2]]) -> monthList
monthList
unlist(monthList) -> monthVector
monthVector
str_c(as.character(westYears,monthVector,"01",sep = "-"
) -> westDates
westDates
twDate2
str_split(twDate2,"年") -> datesSplitList
datesSplitList
map(datesSplitList,~.[[2]]) -> monthList
monthList
unlist(monthList) -> monthVector
monthVector
str_c(as.character(westYears),monthVector,"01",sep = "-"
) -> westDates
westDates
ymp(westDates) -> westDates
twDate2
str_split(twDate2,"年") -> datesSplitList
datesSplitList
map(datesSplitList,~.[[2]]) -> monthList
monthList
unlist(monthList) -> monthVector
monthVector
str_c(as.character(westYears),monthVector,"01",sep = "-"
) -> westDates
westDates
ymd(westDates) -> westDates
westDates
twDate2
str_split(twDate2,"年") -> datesSplitList
datesSplitList
map(datesSplitList,~.[[2]]) -> monthList
monthList
unlist(monthList) -> monthVector
monthVector
str_c(as.character(westYears),monthVector,"01",sep = "-"
) -> westDates
westDates
ymd(westDates) -> westDates
westDates
calss(westDates)
twDate2
str_split(twDate2,"年") -> datesSplitList
datesSplitList
map(datesSplitList,~.[[2]]) -> monthList
monthList
unlist(monthList) -> monthVector
monthVector
str_c(as.character(westYears),monthVector,"01",sep = "-"
) -> westDates
westDates
ymd(westDates) -> westDates
westDates
class(westDates)
knitr::opts_chunk$set(echo = TRUE)
library(lubridate); library(stringr); library(dplyr); library(readr); library(purrr)
x <- as.character(round(runif(10)*100),10)
x
as.integer(x)
logicBig <- as.integer(x) > 50
logicBig
compoundject <- list(1,"hello",TRUE)
compoundject
randomGrades <- sample(40:80,15,replace = T)
randomCredits <- sample(0:3,15,replace=T)
data3 <- list(
成績=randomGrades,
學分數=randomCredits
)
data3
logiPass <- (data3$成績 >= 60)
logiPass
passData <- list(
成績= data3$成績[logiPass],
學分數= data3$學分數[logiPass]
)
passData
sample(99:103,15,replace = T)-> yy
sample(1:12,15,replace=T)-> mm
str_c("民國",str_pad(yy,3,"left","0"),"年",mm,"月") -> twDates
#### twDates
twDates
str_replace(twDates,"民國","") -> x1
x1
str_replace(x1,"月","") -> twDate2
twDate2
str_replace_all(twDates,"(民國)|(月)","") -> x2
x2
twDates
str_sub(twDates,3,5) -> yearCharacter
yearCharacter
as.integer(yearCharacter)+1911 -> westYears
westYears
twDate2
str_split(twDate2,"年") -> datesSplitList
datesSplitList
map(datesSplitList,~.[[2]]) -> monthList
monthList
unlist(monthList) -> monthVector
monthVector
str_c(as.character(westYears),monthVector,"01",sep = "-"
) -> westDates
westDates
class(westDates)
twDate2
str_split(twDate2,"年") -> datesSplitList
datesSplitList
map(datesSplitList,~.[[2]]) -> monthList
monthList
unlist(monthList) -> monthVector
monthVector
str_c(as.character(westYears),monthVector,"01",sep = "-"
) -> westDates
westDates
ymd(westDates) -> westDates
westDates
class(westDates)
randomGrades <- sample(40:80,15,replace = T)
randomCredits <- sample(0:3,15,replace=T)
data3 <- list(
成績=randomGrades,
學分數=randomCredits
)
randomGrades <- sample(40:80,15,replace = T)
randomCredits <- sample(0:3,15,replace=T)
data3 <- list(
成績=randomGrades,
學分數=randomCredits
)
load("sampledTranscriptData.Rda")
load("~/Desktop/GitHub/sampledTranscriptData.Rda")
load("sampledTranscriptData.Rda")
load("sampledTranscriptData.Rda")
names(sampledTranscriptData) <-
c('學號','學期成績','學分數','學年','學期','必選修類別（必／選／通）','系級','科目名稱','年級','學屆')
(sampledTranscriptData$科目名稱 == "科目204") -> chosenSubjectLogi
sampledTranscriptData$學期成績[chosenSubjectLogi] -> chosenGrades
sum(chosenGrades<60)/length(chosenGrades) -> failRate
(sampledTranscriptData$科目名稱 == "科目204") -> logiChosenSubjectLogi
sampledTranscriptData$學期成績[chosenSubjectLogi] -> chosenGrades
sum(chosenGrades<60)/length(chosenGrades) -> failRate
(sampledTranscriptData$科目名稱 == "科目204") -> logiChosenSubjectLogi
length(logiChosenSubjectLogi)
(sampledTranscriptData$科目名稱 == "科目204") -> logiChosenSubjectLogi
length(logiChosenSubjectLogi)
sampledTranscriptData$學期成績[chosenSubjectLogi] -> chosenGrades
length(chosenGrades)
(sampledTranscriptData$科目名稱 == "科目204") -> logiChosenSubjectLogi
length(logiChosenSubjectLogi)
sampledTranscriptData$學期成績[chosenSubjectLogi] -> chosenGrades
length(chosenGrades)
sum(chosenGrades<60)/length(chosenGrades) -> failRate
(sampledTranscriptData$科目名稱 == "科目204") -> logiChosenSubjectLogi
length(logiChosenSubjectLogi)
sampledTranscriptData$學期成績[chosenSubjectLogi] -> chosenGrades
length(chosenGrades)
sum(chosenGrades<60)/length(chosenGrades) -> failRate
failRate
(sampledTranscriptData$科目名稱 == "科目204") -> chosenSubjectLogi
length(chosenSubjectLogi)
sampledTranscriptData$學期成績[chosenSubjectLogi] -> chosenGrades
length(chosenGrades)
sum(chosenGrades<60)/length(chosenGrades) -> failRate
failRate
sampledTranscriptData$學屆 <-
str_sub(sampledTranscriptData$學號,2,4)
sampledTranscriptData$系碼 <-
str_sub(sampledTranscriptData$學號,5,6)
sampledTranscriptData
sampledTranscriptData$學屆 <-
str_sub(sampledTranscriptData$學號,2,4)
sampledTranscriptData$系碼 <-
str_sub(sampledTranscriptData$學號,5,6)
#sampledTranscriptData
sampledTranscriptData$學屆 <-
str_sub(sampledTranscriptData$學號,2,4)
sampledTranscriptData$系碼 <-
str_sub(sampledTranscriptData$學號,5,6)
head(sampledTranscriptData$學號)
head(sampledTranscriptData$系碼)
#sampledTranscriptData
sampledTranscriptData$學系 <- str_replace(sampledTranscriptData$系級,"1","")
sampledTranscriptData$學系 <- str_replace(sampledTranscriptData$學系,"2","")
sampledTranscriptData$學系 <- str_replace(sampledTranscriptData$學系,"3","")
sampledTranscriptData$學系 <- str_replace(sampledTranscriptData$學系,"4","")
sampledTranscriptData$學系
sampledTranscriptData$學系 <- str_replace(sampledTranscriptData$系級,"1","")
sampledTranscriptData$學系 <- str_replace(sampledTranscriptData$學系,"2","")
sampledTranscriptData$學系 <- str_replace(sampledTranscriptData$學系,"3","")
sampledTranscriptData$學系 <- str_replace(sampledTranscriptData$學系,"4","")
head(sampledTranscriptData$系級)
head(sampledTranscriptData$學系)
sampledTranscriptData$學系 <- str_replace(sampledTranscriptData$系級,"[1234]","")
sampledTranscriptData$學系
sampledTranscriptData$學系 <- str_replace(sampledTranscriptData$系級,"[1234]","")
head(sampledTranscriptData$學系)
sampledTranscriptData$學系 <- str_replace(sampledTranscriptData$系級,"1","")
sampledTranscriptData$學系 <- str_replace(sampledTranscriptData$學系,"2","")
sampledTranscriptData$學系 <- str_replace(sampledTranscriptData$學系,"3","")
sampledTranscriptData$學系 <- str_replace(sampledTranscriptData$學系,"4","")
head(sampledTranscriptData$系級)
head(sampledTranscriptData$學系)
(sampledTranscriptData$系碼!="73" &
sampledTranscriptData$學系=="經濟學系") -> logiCheck
unique(sampledTranscriptData$學號[logiCheck]) -> changeMajorStudent
changeMajorStudent
(sampledTranscriptData$系碼!="73" &
sampledTranscriptData$學系=="經濟學系") -> logiCheck
(sampledTranscriptData$學號[logiCheck]) -> changeMajorStudent
changeMajorStudent
(sampledTranscriptData$系碼!="73" &
sampledTranscriptData$學系=="經濟學系") -> logiCheck
unique(sampledTranscriptData$學號[logiCheck]) -> changeMajorStudent
changeMajorStudent
(sampledTranscriptData$學號 == "410073409b" &
sampledTranscriptData$學年==100 &
sampledTranscriptData$學期==1) -> logiSelect
sum(sampledTranscriptData$學分數[logiSelect]*
sampledTranscriptData$學期成績[logiSelect])/sum(sampledTranscriptData$學分數[logiSelect]) -> studentGPA
studentGPA
(sampledTranscriptData$學號 == "410073409b" &
sampledTranscriptData$學年==101 &
sampledTranscriptData$學期==1) -> logiSelect
sum(sampledTranscriptData$學分數[logiSelect]*
sampledTranscriptData$學期成績[logiSelect])/sum(sampledTranscriptData$學分數[logiSelect]) -> studentGPA
studentGPA
