westDates
ymd(westDates) -> westDates
westDates
class(westDates)
knitr::opts_chunk$set(echo = TRUE)
library(lubridate); library(stringr); library(dplyr); library(readr); library(purrr)
x <- as.character(round(runif(10)*100),10)
x
as.integer(x)
logicBig <- as.integer(x) > 50
logicBig
compoundject <- list(1,"hello",TRUE)
compoundject
randomGrades <- sample(40:80,15,replace = T)
randomCredits <- sample(0:3,15,replace=T)
data3 <- list(
成績=randomGrades,
學分數=randomCredits
)
data3
logiPass <- (data3$成績 >= 60)
logiPass
passData <- list(
成績= data3$成績[logiPass],
學分數= data3$學分數[logiPass]
)
passData
sample(99:103,15,replace = T)-> yy
sample(1:12,15,replace=T)-> mm
str_c("民國",str_pad(yy,3,"left","0"),"年",mm,"月") -> twDates
#### twDates
twDates
str_replace(twDates,"民國","") -> x1
x1
str_replace(x1,"月","") -> twDate2
twDate2
str_replace_all(twDates,"(民國)|(月)","") -> x2
x2
twDates
str_sub(twDates,3,5) -> yearCharacter
yearCharacter
as.integer(yearCharacter)+1911 -> westYears
westYears
twDate2
str_split(twDate2,"年") -> datesSplitList
datesSplitList
map(datesSplitList,~.[[2]]) -> monthList
monthList
unlist(monthList) -> monthVector
monthVector
str_c(as.character(westYears),monthVector,"01",sep = "-"
) -> westDates
westDates
class(westDates)
twDate2
str_split(twDate2,"年") -> datesSplitList
datesSplitList
map(datesSplitList,~.[[2]]) -> monthList
monthList
unlist(monthList) -> monthVector
monthVector
str_c(as.character(westYears),monthVector,"01",sep = "-"
) -> westDates
westDates
ymd(westDates) -> westDates
westDates
class(westDates)
randomGrades <- sample(40:80,15,replace = T)
randomCredits <- sample(0:3,15,replace=T)
data3 <- list(
成績=randomGrades,
學分數=randomCredits
)
randomGrades <- sample(40:80,15,replace = T)
randomCredits <- sample(0:3,15,replace=T)
data3 <- list(
成績=randomGrades,
學分數=randomCredits
)
load("sampledTranscriptData.Rda")
load("~/Desktop/GitHub/sampledTranscriptData.Rda")
load("sampledTranscriptData.Rda")
load("sampledTranscriptData.Rda")
names(sampledTranscriptData) <-
c('學號','學期成績','學分數','學年','學期','必選修類別（必／選／通）','系級','科目名稱','年級','學屆')
(sampledTranscriptData$科目名稱 == "科目204") -> chosenSubjectLogi
sampledTranscriptData$學期成績[chosenSubjectLogi] -> chosenGrades
sum(chosenGrades<60)/length(chosenGrades) -> failRate
(sampledTranscriptData$科目名稱 == "科目204") -> logiChosenSubjectLogi
sampledTranscriptData$學期成績[chosenSubjectLogi] -> chosenGrades
sum(chosenGrades<60)/length(chosenGrades) -> failRate
(sampledTranscriptData$科目名稱 == "科目204") -> logiChosenSubjectLogi
length(logiChosenSubjectLogi)
(sampledTranscriptData$科目名稱 == "科目204") -> logiChosenSubjectLogi
length(logiChosenSubjectLogi)
sampledTranscriptData$學期成績[chosenSubjectLogi] -> chosenGrades
length(chosenGrades)
(sampledTranscriptData$科目名稱 == "科目204") -> logiChosenSubjectLogi
length(logiChosenSubjectLogi)
sampledTranscriptData$學期成績[chosenSubjectLogi] -> chosenGrades
length(chosenGrades)
sum(chosenGrades<60)/length(chosenGrades) -> failRate
(sampledTranscriptData$科目名稱 == "科目204") -> logiChosenSubjectLogi
length(logiChosenSubjectLogi)
sampledTranscriptData$學期成績[chosenSubjectLogi] -> chosenGrades
length(chosenGrades)
sum(chosenGrades<60)/length(chosenGrades) -> failRate
failRate
(sampledTranscriptData$科目名稱 == "科目204") -> chosenSubjectLogi
length(chosenSubjectLogi)
sampledTranscriptData$學期成績[chosenSubjectLogi] -> chosenGrades
length(chosenGrades)
sum(chosenGrades<60)/length(chosenGrades) -> failRate
failRate
sampledTranscriptData$學屆 <-
str_sub(sampledTranscriptData$學號,2,4)
sampledTranscriptData$系碼 <-
str_sub(sampledTranscriptData$學號,5,6)
sampledTranscriptData
sampledTranscriptData$學屆 <-
str_sub(sampledTranscriptData$學號,2,4)
sampledTranscriptData$系碼 <-
str_sub(sampledTranscriptData$學號,5,6)
#sampledTranscriptData
sampledTranscriptData$學屆 <-
str_sub(sampledTranscriptData$學號,2,4)
sampledTranscriptData$系碼 <-
str_sub(sampledTranscriptData$學號,5,6)
head(sampledTranscriptData$學號)
head(sampledTranscriptData$系碼)
#sampledTranscriptData
sampledTranscriptData$學系 <- str_replace(sampledTranscriptData$系級,"1","")
sampledTranscriptData$學系 <- str_replace(sampledTranscriptData$學系,"2","")
sampledTranscriptData$學系 <- str_replace(sampledTranscriptData$學系,"3","")
sampledTranscriptData$學系 <- str_replace(sampledTranscriptData$學系,"4","")
sampledTranscriptData$學系
sampledTranscriptData$學系 <- str_replace(sampledTranscriptData$系級,"1","")
sampledTranscriptData$學系 <- str_replace(sampledTranscriptData$學系,"2","")
sampledTranscriptData$學系 <- str_replace(sampledTranscriptData$學系,"3","")
sampledTranscriptData$學系 <- str_replace(sampledTranscriptData$學系,"4","")
head(sampledTranscriptData$系級)
head(sampledTranscriptData$學系)
sampledTranscriptData$學系 <- str_replace(sampledTranscriptData$系級,"[1234]","")
sampledTranscriptData$學系
sampledTranscriptData$學系 <- str_replace(sampledTranscriptData$系級,"[1234]","")
head(sampledTranscriptData$學系)
sampledTranscriptData$學系 <- str_replace(sampledTranscriptData$系級,"1","")
sampledTranscriptData$學系 <- str_replace(sampledTranscriptData$學系,"2","")
sampledTranscriptData$學系 <- str_replace(sampledTranscriptData$學系,"3","")
sampledTranscriptData$學系 <- str_replace(sampledTranscriptData$學系,"4","")
head(sampledTranscriptData$系級)
head(sampledTranscriptData$學系)
(sampledTranscriptData$系碼!="73" &
sampledTranscriptData$學系=="經濟學系") -> logiCheck
unique(sampledTranscriptData$學號[logiCheck]) -> changeMajorStudent
changeMajorStudent
(sampledTranscriptData$系碼!="73" &
sampledTranscriptData$學系=="經濟學系") -> logiCheck
(sampledTranscriptData$學號[logiCheck]) -> changeMajorStudent
changeMajorStudent
(sampledTranscriptData$系碼!="73" &
sampledTranscriptData$學系=="經濟學系") -> logiCheck
unique(sampledTranscriptData$學號[logiCheck]) -> changeMajorStudent
changeMajorStudent
(sampledTranscriptData$學號 == "410073409b" &
sampledTranscriptData$學年==100 &
sampledTranscriptData$學期==1) -> logiSelect
sum(sampledTranscriptData$學分數[logiSelect]*
sampledTranscriptData$學期成績[logiSelect])/sum(sampledTranscriptData$學分數[logiSelect]) -> studentGPA
studentGPA
(sampledTranscriptData$學號 == "410073409b" &
sampledTranscriptData$學年==101 &
sampledTranscriptData$學期==1) -> logiSelect
sum(sampledTranscriptData$學分數[logiSelect]*
sampledTranscriptData$學期成績[logiSelect])/sum(sampledTranscriptData$學分數[logiSelect]) -> studentGPA
studentGPA
knitr::opts_chunk$set(echo = TRUE)
Vector1 <- letters[1:6]
Vector1
names(Vector1)
names(Vector1) <- c('名稱1','名稱2','名稱3','名稱4','名稱5','名稱6')
names(Vector1)
Vector1[["名稱4"]]
StuDF2 <- data.frame(
學號=c(172,214,322,425,517),
姓名=c("小明","大雄","胖虎","小新","大白"),
成績=c(80,60,90,70,50),
stringsAsFactors = FALSE
)
StuDF2
colnames(StuDF2)
colnames(StuDF2)
names(StuDF2)
clonames(StuDF2) <- c("col1","col2","col3")
colnames(StuDF2) <- c("col1","col2","col3")
colnames(StuDF2)
colnames(StuDF2)[[2]] <- c("姓名")
colnames(StuDF2)[[2]] <- c("姓名")
colnames(StuDF2)
colnames(StuDF2)c[{2,3}] <- c("學號","班級")
colnames(StuDF2)[c(2,3)] <- c("學號","班級")
colnames(StuDF2)
rownames(StuDF2)
rownames(StuDF2) <- str_c("第" ,1:5,"筆")
library(stringr)
rownames(StuDF2)
rownames(StuDF2) <- str_c("第" ,1:5,"筆")
rownames(StuDF2)
a <- c("1","b","TRUE")
a
a[[2]] <- "c" # 元素存在
a[[5]] <- "7" # 元素不存在
a
b <- list(
元素1=1,
元素2="Hello",
元素3=TRUE
)
b <- list(
元素1=1,
元素2="Hello",
元素3=TRUE
)
b
b <- list(
元素1=1,
元素2="Hello",
元素3=TRUE
)
b
b
b[[3]] <- FALSE
b[[5]] <- "7"
b
b[[3]] <- FALSE
b[[5]] <- "7"
b
b$元素3 <- FALSE
b
b[["元素3"]] <- FALSE
b
names(b)
b[["新元素A"]] <- c(1,2,3)
b$新元素B <- c(T,F,T)
b
library(readr)
exData3 <- read_csv("https://raw.githubusercontent.com/tpemartin/github-data/master/exData3.csv",
col_types = cols(
匯率 = col_number(),
期間 = col_character()))
class(exData3$期間)
library(readr)
exData3 <- read_csv("https://raw.githubusercontent.com/tpemartin/github-data/master/exData3.csv",
col_types = cols(
匯率 = col_number(),
期間 = col_character()))
#取出 期間 轉成 date
exData3$期間 -> .temp
library(lubridate)
ymd(.temp) -> exData3$期間
class(exData3$期間)
as.Date(exData3$期間) <- exData3$期間
as.Date(exData3$期間) -> exData3$期間
class(exData3$期間)
as.Date(exData3$期間) -> exData3$期間
class(exData3$期間)
as.Date(exData3$期間) -> exData3$期間
class(exData3$期間)
ymd(exData3$期間) -> exData3$期間
class(exData3$期間)
exData3$isAsiaCrisis <- (exData3$期間 >= ymd("1997-06-01") & exData3$期間 <= ymd("1998-12-01") )
class(exData3$isAsiaCrisis)
exDate3[exData3$isAsiaCrisis == T ,]
exDate3[exData3$isAsiaCrisis == T ,]
logiAsiaCrisis <- exData3$isAsiaCrisis
exData3[logiAsiaCrisis, ]
logiAsiaCrisis <- exData3$isAsiaCrisis
exData3[logiAsiaCrisis, ]
exDate3[exData3$isAsiaCrisis,]
exData3[exData3$isAsiaCrisis == T ,]
library(readr)
transcriptDataFinal <- read_csv("https://raw.githubusercontent.com/tpemartin/github-data/master/transcriptDataFinal.csv")
names(transcriptDataFinal)
View(transcriptDataFinal)
log1 <- transcriptDataFinal$學號 == "92aS67fee"
transcriptDataFinal[log1,]
knitr::opts_chunk$set(echo = TRUE)
utility_cobb_douglass <- function(x,y,.alpha,.beta){
utilValue <- x^.alpha*y^.beta # 程序產生output值
return(utilValue) # 傳回output值
}
class(utility_cobb_douglass())
class(utility_cobb_douglass)
utility_cobb_douglass(1,2,0.5,0.8)
fx <- function(x,.aplha){
aa <- x+.alpha
return(aa)
}
fx(3,6)
fx <- function(x,.alpha){
aa <- x+.alpha
return(aa)
}
fx(3,6)
fx <- function(x,.alpha){
f_value <- x+.alpha
return(f_value)
}
fx(3,6)
fx <- function(x,.alpha){
f_value <- x+.alpha
return(f_value)
}
fx(3,6)
fx <- function(x,alpha){
f_value <- x+alpha
return(f_value)
}
fx(3,6)
fx(3,6)
fx(-2,0.5)
fx <- function(x,alpha){
f_value <- x+alpha
return(f_value)
}
fx(3,6)
fx(-2,0.5)
supply_fun <- function(P,a,b){
Qs <- -a+b*p
return(Qs)
}
demand_fun <- function(P,c,d){
Qd <- c+d*P
return(Qd)
}
fx(3,6)
fx(-2,0.5)
supply_fun <- function(P,a,b){
Qs <- -a+b*p
return(Qs)
}
demand_fun <- function(P,c,d){
Qd <- c+d*P
return(Qd)
}
fx <- function(x,alpha){
f_value <- x+alpha
return(f_value)
}
fx(3,6)
fx(-2,0.5)
knitr::opts_chunk$set(echo = TRUE)
utility_cobb_douglass <- function(x,y,.alpha,.beta){
utilValue <- x^.alpha*y^.beta # 程序產生output值
return(utilValue) # 傳回output值
}
class(utility_cobb_douglass)
utility_cobb_douglass(1,2,0.5,0.8)
fx <- function(x,alpha){
f_value <- x+alpha
return(f_value)
}
fx(3,6)
fx(-2,0.5)
supply_fun <- function(P,a,b){
Qs <- -a+b*p
return(Qs)
}
demand_fun <- function(P,c,d){
Qd <- c+d*P
return(Qd)
}
summary(cars)
plot(pressure)
supply_fun <- function(P,a,b){
Qs <- a+b*p
return(Qs)
}
demand_fun <- function(P,c,d){
Qd <- c-d*P
return(Qd)
}
supply_fun(1,0,1)
supply_fun <- function(P,a,b){
Qs <- a+b*P
return(Qs)
}
demand_fun <- function(P,c,d){
Qd <- c-d*P
return(Qd)
}
supply_fun(1,0,1)
supply_fun(1,0,1)
demand_fun(1,5,1)
supply_fun(1,0,1)
demand_fun(1,5,1)
demand_fun(1,5,1) - supply_fun(1,0,1)
library(readr)
transcriptDataFinal <- read_csv("https://raw.githubusercontent.com/tpemartin/github-data/master/transcriptDataFinal.csv")
library(readr)
transcriptDataFinal <- read_csv("https://raw.githubusercontent.com/tpemartin/github-data/master/transcriptDataFinal.csv")
studentID <-"92aS67fee"
transcriptDataFinal$學號==studentID -> logiChosenStudent
subSample <- transcriptDataFinal[logiChosenStudent,]
sum(subSample$學期成績*subSample$學分數)/
sum(subSample$學分數) -> GPA
gpa_fun <- function(studentID){
transcriptDataFinal$學號==studentID -> logiChosenStudent
subSample <- transcriptDataFinal[logiChosenStudent,]
sum(subSample$學期成績*subSample$學分數)/
sum(subSample$學分數) -> GPA
return(GPA)
}
gpa_fun("92aS67fee")
View(transcriptDataFinal)
knitr::opts_chunk$set(echo = TRUE)
gpa_fun("92aS67fee")
knitr::opts_chunk$set(echo = TRUE)
library(lubridate)
ymd_hms("1973-02-21 12:05:22",tz="America/New_York")
->fromDateTime
library(lubridate)
ymd_hms("1973-02-21 12:05:22",tz="America/New_York")
-> fromDateTime
knitr::opts_chunk$set(echo = TRUE)
library(lubridate)
ymd_hms("1973-02-21 12:05:22",tz="America/New_York")
-> fromDateTime
ymd_hms_tzChange <- function(input,fromTzone,toTzone){
time1 <- ymd_hms(input,tz = fromTzone)
answer <- with_tz(time1,tzone = toTzone)
return(answer)
}
ymd_hms_tzChange("1973-02-21
12:05:22","America/New_York","Asia/Taiper")
library(lubridate)
ymd_hms("1973-02-21 12:05:22",tz="America/New_York")
-> fromDateTime
ymd_hms_tzChange <- function(input,fromTzone,toTzone){
time1 <- ymd_hms(input,tz = fromTzone)
answer <- with_tz(time1,tzone = toTzone)
return(answer)
}
ymd_hms_tzChange("1973-02-21
12:05:22","America/New_York","Asia/Taiper")
ymd_hms_tzChange <- function(input,fromTzone,toTzone){
time1 <- ymd_hms(input,tz = fromTzone)
answer <- with_tz(time1,tzone = toTzone)
return(answer)
}
ymd_hms_tzChange("1973-02-21
12:05:22","America/New_York","Asia/Taipei")
(invoiceList$訂單時區=="America/New_York") -> nyLogical
names(invoiceList)[[2]] <- "訂單時區之下單時間"
(invoiceList$訂單時區=="America/New_York") -> nyLogical
load("invoiceList.Rda")
names(invoiceList)[[2]] <- "訂單時區之下單時間"
load("invoiceList.Rda")
load("invoiceList.Rda")
load("invoiceList.Rda")
load("invoiceList.Rda")
str(invoiceList)
names(invoiceList)[[2]] <- "訂單時區之下單時間"
invoiceList
(invoiceList$訂單時區=="America/New_York") -> nyLogical
(invoiceList$訂單時區=="Asia/Taipei") -> tpLogical
invoiceList$UTC時間[nyLogical] <-
with_tz(ymd_hms(invoiceList$`訂單時區之下單時間`[nyLogical],
tz="America/New_York"),tzone="UTC")
invoiceList$UTC時間[tpLogical] <-
with_tz(ymd_hms(invoiceList$`訂單時區之下單時間`[tpLogical],
tz="Asia/Taipei"),tzone="UTC")
invoiceList
library(lubridate)
ymd_hms("1973-02-21 12:05:22",tz="America/New_York")
-> fromDateTime
ymd_hms_tzChange <- function(input,fromTzone,toTzone){
time1 <- ymd_hms(input,tz = fromTzone)
answer <- with_tz(time1,tzone = toTzone)
return(answer)
}
ymd_hms_tzChange("1973-02-21
12:05:22","America/New_York","Asia/Taipei")
library(stringr)
sample(99:103,15,replace = T)-> yy
sample(1:12,15,replace=T)-> mm
str_c("民國",str_pad(yy,3,"left","0"),"年",mm,"月") -> twDates
library(stringr)
sample(99:103,15,replace = T)-> yy
sample(1:12,15,replace=T)-> mm
str_c("民國",str_pad(yy,3,"left","0"),"年",mm,"月") -> twDates
twDates
library(stringr); library(lubridate)
yyyy<-as.integer(str_extract(twDates,"(?<=(民國))[:digit:]+"))+1911
mm<-str_extract(twDates,"[:digit:]+(?=月)")
yyyymmdd <- ymd(str_c(yyyy,mm,"01",sep="-"))
library(stringr)
sample(99:103,15,replace = T)-> yy
sample(1:12,15,replace=T)-> mm
str_c("民國",str_pad(yy,3,"left","0"),"年",mm,"月") -> twDates
twDates
library(stringr); library(lubridate)
yyyy<-as.integer(str_extract(twDates,"(?<=(民國))[:digit:]+"))+1911
mm<-str_extract(twDates,"[:digit:]+(?=月)")
yyyymmdd <- ymd(str_c(yyyy,mm,"01",sep="-"))
twDates
date_convert_twYM <- function(twDates){library(stringr); library(lubridate)
yyyy<-as.integer(str_extract(twDates,"(?<=(民國))[:digit:]+"))+1911
mm<-str_extract(twDates,"[:digit:]+(?=月)")
yyyymmdd <- ymd(str_c(yyyy,mm,"01",sep="-"))
return(yyyymmdd)
}
