---
title: "Untitled"
author: '22'
date: "2019/8/20"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```



#6.3 Recursive objects
```{r}
studentRecord <-
  list(
    studentID="410073058",
    Name="王小明",
    gender="男",
    grade=list(
      one=88,
      two=90.3,
      third=92,
      forth=95
    )
  )

studentRecord
```

有幾個元素
```{r}
length(studentRecord)
```

#6.4 Object extraction
```{r}
plasticContainer <- list(
  greenBox=c("paper","scissor"),     # location 1
  redBox=c(1,3,2.5),               # location 2
  blueBox=c(TRUE,FALSE,TRUE,TRUE)    # location 3
)
```

#6.4.1 [[.]] extraction : [[.]]用來取出所要的「一個」元素
```{r}
plasticContainer[["greenBox"]] 
plasticContainer[[1]]             #取出greenBox這個元素
```
取出paper
方法一 :
```{r}
x <- plasticContainer[["greenBox"]] 
x[[1]]                            

```
方法二 :
```{r}
plasticContainer[["greenBox"]][[1]] 
#所有extraction操作均可直接串接
```



((練習

1.請取出前面成績單物件的aaa元素
```{r}
Grade <- c(
  aaa=90,
  bbb=77,
  ccc=88
)
```

```{r}
Grade[[1]]
Grade[["aaa"]]
```

2.針對studentRecord物件:

請取出姓名元素。

請取出三年級學年平均成績。

```{r}
studentRecord[[2]]
```

```{r}
studentRecord[[4]][[3]]
```

#6.4.2 [.] extraction :  [.]用來取出所要的「一群」元素

同時取出greenBox及redBox兩個元素
```{r}
plasticContainer[c("greenBox","redBox")] 
plasticContainer[c(1,2)]
```

以[.]和[[.]]取一個元素的結果會有一些不同
```{r}
plasticContainer

extract1 <- plasticContainer[c("greenBox")]
extract1
extract2 <- plasticContainer[[c("greenBox")]]
extract2
```

請各自由extract1及extract2取出“paper”元素值
```{r}
extract1[[1]][[1]]
extract2[[1]]

```



另一個[.] extraction可以接受的是使用logical vector來對應「個別」元素要（TRUE）/不要（FALSE）取出來；由於是對應「個別」元素，所以logical vector長度要和物件內元素個數一樣

```{r}
plasticContainer

length(plasticContainer)
plasticContainer[c(T,F,T)]   #redbox不取
```


#6.4.3 $. extraction
只能用在list vector，且

只能取「一個」元素，其中.一定為「元素名稱」

```{r}
plasticContainer$greenBox
plasticContainer[["greenBox"]]
```

Atomic vectors不行
```{r}
Grade <- c(
  aaa=90,
  bbb=77,
  ccc=88
)
```

```{r}
grade$aaa
```



#6.4.4 範例：Github commit記錄



```{r}
your_github_username <- "tpemartin"
your_practice_reponame <- "107-2-inclass-practice"
library(httr)
library(stringr)
str_replace_all(
  "https://api.github.com/repos/:owner/:repo/commits",
  c(
    ":owner"=your_github_username,
    ":repo"=your_practice_reponame
    )
  ) -> commitCheckStatement
commitCheck <- content(GET(commitCheckStatement))
```

```{r}
commitCheckStatement
```

```{r}
commitCheck[[4]][["commit"]][["committer"]][["date"]]
        
```

```{r}
commitCheck[[4]]$commit[["committer"]][["date"]]

```





#6.4.6 範例：str_split
```{r}
library(readr)
filmVotingData <- read_csv("https://raw.githubusercontent.com/tpemartin/github-data/master/podcastcompetition3.csv")
str_replace(filmVotingData$請選擇你最喜歡的影片二部,", by"," by") -> favoriteTwo
birthday <- filmVotingData$`出生西元年月日（驗證本人用）`
timeStamp <- filmVotingData$Timestamp
```

```{r}
filmVotingData$Timestamp
filmVotingData[["Timestamp"]]
filmVotingData$`Timestamp`
```


```{r}
library(stringr)
str_split(favoriteTwo,", ") -> favoriteTwoList # 將選擇的兩片split成兩個元素
unlist(favoriteTwoList) -> allVotes # 將list堆疊成atomic vector
table(allVotes) # 計算每個類別的次數
```

Q1 . birthday只能有8位元，str_length()可計算每個元素的位元長度。請產生一個logical vector稱為logiCorrect，TRUE表示剛好8位元
```{r}
logiCorrect <- str_length(birthday) == 8
logiCorrect
```

```{r}
favoriteTwo[logiCorrect] -> vaildFavoriteTwo
vaildFavoriteTwo
```




















## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r cars}
summary(cars)
```

## Including Plots

You can also embed plots, for example:

```{r pressure, echo=FALSE}
plot(pressure)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
